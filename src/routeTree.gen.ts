/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LogoutRouteImport } from './routes/logout'
import { Route as userRouteRouteImport } from './routes/(user)/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as authSignupRouteImport } from './routes/(auth)/signup'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as userListRouteRouteImport } from './routes/(user)/list/route'
import { Route as userSettingsIndexRouteImport } from './routes/(user)/settings/index'
import { Route as userLogsIndexRouteImport } from './routes/(user)/logs/index'
import { Route as userListIndexRouteImport } from './routes/(user)/list/index'
import { Route as userAnalyticsIndexRouteImport } from './routes/(user)/analytics/index'
import { Route as userListIdRouteRouteImport } from './routes/(user)/list/$id/route'
import { Route as userListIdIndexRouteImport } from './routes/(user)/list/$id/index'

const LogoutRoute = LogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const userRouteRoute = userRouteRouteImport.update({
  id: '/(user)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignupRoute = authSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authRouteRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)
const userListRouteRoute = userListRouteRouteImport.update({
  id: '/list',
  path: '/list',
  getParentRoute: () => userRouteRoute,
} as any)
const userSettingsIndexRoute = userSettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => userRouteRoute,
} as any)
const userLogsIndexRoute = userLogsIndexRouteImport.update({
  id: '/logs/',
  path: '/logs/',
  getParentRoute: () => userRouteRoute,
} as any)
const userListIndexRoute = userListIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => userListRouteRoute,
} as any)
const userAnalyticsIndexRoute = userAnalyticsIndexRouteImport.update({
  id: '/analytics/',
  path: '/analytics/',
  getParentRoute: () => userRouteRoute,
} as any)
const userListIdRouteRoute = userListIdRouteRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => userListRouteRoute,
} as any)
const userListIdIndexRoute = userListIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => userListIdRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof userRouteRouteWithChildren
  '/logout': typeof LogoutRoute
  '/list': typeof userListRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/list/$id': typeof userListIdRouteRouteWithChildren
  '/analytics': typeof userAnalyticsIndexRoute
  '/list/': typeof userListIndexRoute
  '/logs': typeof userLogsIndexRoute
  '/settings': typeof userSettingsIndexRoute
  '/list/$id/': typeof userListIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof userRouteRouteWithChildren
  '/logout': typeof LogoutRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/analytics': typeof userAnalyticsIndexRoute
  '/list': typeof userListIndexRoute
  '/logs': typeof userLogsIndexRoute
  '/settings': typeof userSettingsIndexRoute
  '/list/$id': typeof userListIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(user)': typeof userRouteRouteWithChildren
  '/logout': typeof LogoutRoute
  '/(user)/list': typeof userListRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/(user)/list/$id': typeof userListIdRouteRouteWithChildren
  '/(user)/analytics/': typeof userAnalyticsIndexRoute
  '/(user)/list/': typeof userListIndexRoute
  '/(user)/logs/': typeof userLogsIndexRoute
  '/(user)/settings/': typeof userSettingsIndexRoute
  '/(user)/list/$id/': typeof userListIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/logout'
    | '/list'
    | '/login'
    | '/signup'
    | '/list/$id'
    | '/analytics'
    | '/list/'
    | '/logs'
    | '/settings'
    | '/list/$id/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/logout'
    | '/login'
    | '/signup'
    | '/analytics'
    | '/list'
    | '/logs'
    | '/settings'
    | '/list/$id'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(user)'
    | '/logout'
    | '/(user)/list'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/(user)/list/$id'
    | '/(user)/analytics/'
    | '/(user)/list/'
    | '/(user)/logs/'
    | '/(user)/settings/'
    | '/(user)/list/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  userRouteRoute: typeof userRouteRouteWithChildren
  LogoutRoute: typeof LogoutRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(user)': {
      id: '/(user)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(user)/list': {
      id: '/(user)/list'
      path: '/list'
      fullPath: '/list'
      preLoaderRoute: typeof userListRouteRouteImport
      parentRoute: typeof userRouteRoute
    }
    '/(user)/settings/': {
      id: '/(user)/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof userSettingsIndexRouteImport
      parentRoute: typeof userRouteRoute
    }
    '/(user)/logs/': {
      id: '/(user)/logs/'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof userLogsIndexRouteImport
      parentRoute: typeof userRouteRoute
    }
    '/(user)/list/': {
      id: '/(user)/list/'
      path: '/'
      fullPath: '/list/'
      preLoaderRoute: typeof userListIndexRouteImport
      parentRoute: typeof userListRouteRoute
    }
    '/(user)/analytics/': {
      id: '/(user)/analytics/'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof userAnalyticsIndexRouteImport
      parentRoute: typeof userRouteRoute
    }
    '/(user)/list/$id': {
      id: '/(user)/list/$id'
      path: '/$id'
      fullPath: '/list/$id'
      preLoaderRoute: typeof userListIdRouteRouteImport
      parentRoute: typeof userListRouteRoute
    }
    '/(user)/list/$id/': {
      id: '/(user)/list/$id/'
      path: '/'
      fullPath: '/list/$id/'
      preLoaderRoute: typeof userListIdIndexRouteImport
      parentRoute: typeof userListIdRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface userListIdRouteRouteChildren {
  userListIdIndexRoute: typeof userListIdIndexRoute
}

const userListIdRouteRouteChildren: userListIdRouteRouteChildren = {
  userListIdIndexRoute: userListIdIndexRoute,
}

const userListIdRouteRouteWithChildren = userListIdRouteRoute._addFileChildren(
  userListIdRouteRouteChildren,
)

interface userListRouteRouteChildren {
  userListIdRouteRoute: typeof userListIdRouteRouteWithChildren
  userListIndexRoute: typeof userListIndexRoute
}

const userListRouteRouteChildren: userListRouteRouteChildren = {
  userListIdRouteRoute: userListIdRouteRouteWithChildren,
  userListIndexRoute: userListIndexRoute,
}

const userListRouteRouteWithChildren = userListRouteRoute._addFileChildren(
  userListRouteRouteChildren,
)

interface userRouteRouteChildren {
  userListRouteRoute: typeof userListRouteRouteWithChildren
  userAnalyticsIndexRoute: typeof userAnalyticsIndexRoute
  userLogsIndexRoute: typeof userLogsIndexRoute
  userSettingsIndexRoute: typeof userSettingsIndexRoute
}

const userRouteRouteChildren: userRouteRouteChildren = {
  userListRouteRoute: userListRouteRouteWithChildren,
  userAnalyticsIndexRoute: userAnalyticsIndexRoute,
  userLogsIndexRoute: userLogsIndexRoute,
  userSettingsIndexRoute: userSettingsIndexRoute,
}

const userRouteRouteWithChildren = userRouteRoute._addFileChildren(
  userRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  userRouteRoute: userRouteRouteWithChildren,
  LogoutRoute: LogoutRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
